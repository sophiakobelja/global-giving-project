{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\nimport React from \"react\";\nimport { INITIALIZE_COUNTRIES, LOAD_ALL_PROJECTS, ADD_PROJECTS, SET_CURRENT_COUNTRY, SET_CURRENT_PROJECT, SET_CURRENT_PROJECTS, ZOOM, ZOOM_SCALE, CENTER } from './actions';\nconst initialState = {\n  projects: {},\n  //all currently loaded projects indexed by project id \n  currentProjects: [],\n  //all currently viewed projects in list view\n  currentProject: undefined,\n  //currently viewed project object \n  countries: [],\n  //all preloaded country information\n  currentCountry: undefined,\n  //currently viewed country\n  nextProjectIds: {} //save next project id. indexed by country except for default \n  //case, where the index will be stored as 'default'\n\n};\n\nfunction data(state = initialState, action) {\n  switch (action.type) {\n    case INITIALIZE_COUNTRIES:\n      return _objectSpread({}, state, {\n        countries: action.countries\n      });\n\n    case ADD_PROJECTS:\n      //add projects\n      var addProjects = _Object$assign({}, state.projects);\n\n      action.projects.forEach(el => {\n        addProjects[el.id] = el;\n      }); // Set next project ids \n\n      var nextProjectId = action.nextProjectId ? action.nextProjectId : -1;\n\n      var ids = _Object$assign({}, state.nextProjectIds);\n\n      if (state.currentCountry !== undefined) {\n        ids[state.currentCountry.country] = nextProjectId;\n      } else {\n        ids['default'] = nextProjectId;\n      }\n\n      return _objectSpread({}, state, {\n        projects: addProjects,\n        // If current country is currently defined, ensure \n        // current projects is filtered by country code \n        currentProjects: state.currentCountry !== undefined ? _Object$values(addProjects).filter(el => {\n          return el.iso3166CountryCode === state.currentCountry.alpha2;\n        }) : _Object$values(addProjects),\n        nextProjectIds: ids //Set current country:\n        // - Filter all previously loaded projects by country code and set to current projects\n        // - Initialize nextProjectIds[country] if necessary \n\n      });\n\n    case SET_CURRENT_COUNTRY:\n      var ids = _Object$assign({}, state.nextProjectIds);\n\n      if (ids[action.country.country] === undefined) {\n        ids[action.country.country] = -1;\n      }\n\n      return _objectSpread({}, state, {\n        currentProjects: _Object$values(state.projects).filter(el => {\n          return el.iso3166CountryCode === action.country.alpha2;\n        }),\n        currentProject: undefined,\n        nextProjectIds: ids,\n        currentCountry: action.country //Set current project\n\n      });\n\n    case SET_CURRENT_PROJECT:\n      return _objectSpread({}, state, {\n        currentProjects: [action.project],\n        currentProject: action.project,\n        currentCountry: state.countries.find(el => {\n          return el.alpha2 === action.project.iso3166CountryCode;\n        }) //Set all previously loaded projects into currentProjects to be updated in list view\n\n      });\n\n    case LOAD_ALL_PROJECTS:\n      return _objectSpread({}, state, {\n        currentProjects: _Object$values(state.projects),\n        currentProject: undefined,\n        currentCountry: undefined\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction map(state = {\n  zoom: .7,\n  center: [0, 20]\n}, action) {\n  switch (action.type) {\n    //zoom into map on set current country (this means user clicked a country)\n    case SET_CURRENT_COUNTRY:\n      console.log(action);\n      return _objectSpread({}, state, {\n        zoom: 5,\n        center: [action.country.latlng[0], action.country.latlng[1]]\n      });\n\n    case CENTER:\n      return _objectSpread({}, state, {\n        center: action.center\n      });\n\n    case ZOOM_SCALE:\n      return _objectSpread({}, state, {\n        zoom: action.scale * state.zoom\n      });\n\n    case ZOOM:\n      return _objectSpread({}, state, {\n        zoom: action.zoom\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  data,\n  map\n});\nexport default rootReducer;","map":{"version":3,"sources":["/app/redux/reducers.js"],"names":["combineReducers","React","INITIALIZE_COUNTRIES","LOAD_ALL_PROJECTS","ADD_PROJECTS","SET_CURRENT_COUNTRY","SET_CURRENT_PROJECT","SET_CURRENT_PROJECTS","ZOOM","ZOOM_SCALE","CENTER","initialState","projects","currentProjects","currentProject","undefined","countries","currentCountry","nextProjectIds","data","state","action","type","addProjects","forEach","el","id","nextProjectId","ids","country","filter","iso3166CountryCode","alpha2","project","find","map","zoom","center","console","log","latlng","scale","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\nimport React from \"react\"\n\nimport {\n  INITIALIZE_COUNTRIES,\n  LOAD_ALL_PROJECTS,\n  ADD_PROJECTS,\n  SET_CURRENT_COUNTRY,\n  SET_CURRENT_PROJECT,\n  SET_CURRENT_PROJECTS,\n  ZOOM,\n  ZOOM_SCALE,\n  CENTER\n} from './actions'\n\nconst initialState = {\n  projects: {}, //all currently loaded projects indexed by project id \n  currentProjects: [], //all currently viewed projects in list view\n  currentProject: undefined, //currently viewed project object \n  countries: [], //all preloaded country information\n  currentCountry: undefined, //currently viewed country\n  nextProjectIds: {}, //save next project id. indexed by country except for default \n                      //case, where the index will be stored as 'default'\n}\n\nfunction data(state = initialState, action) {\n  switch (action.type) {\n    case INITIALIZE_COUNTRIES:\n      return {\n        ...state,\n        countries: action.countries\n      }\n\n    case ADD_PROJECTS:\n\n      //add projects\n      var addProjects = Object.assign({}, state.projects)\n      action.projects.forEach(el => { addProjects[el.id] = el })\n\n      // Set next project ids \n      var nextProjectId = action.nextProjectId ? action.nextProjectId : -1\n      var ids = Object.assign({}, state.nextProjectIds)\n      if (state.currentCountry !== undefined) {\n        ids[state.currentCountry.country] = nextProjectId\n      } else {\n        ids['default'] = nextProjectId\n      }\n\n      return {\n        ...state,\n\n        projects: addProjects,\n\n        // If current country is currently defined, ensure \n        // current projects is filtered by country code \n        currentProjects: state.currentCountry !== undefined ?\n          Object.values(addProjects).filter(el => {\n            return el.iso3166CountryCode === state.currentCountry.alpha2\n          }) : Object.values(addProjects),\n\n        nextProjectIds: ids\n      }\n\n    //Set current country:\n      // - Filter all previously loaded projects by country code and set to current projects\n      // - Initialize nextProjectIds[country] if necessary \n    case SET_CURRENT_COUNTRY:\n\n      var ids = Object.assign({}, state.nextProjectIds)\n      if (ids[action.country.country] === undefined) {\n        ids[action.country.country] = -1\n      }\n\n      return {\n        ...state,\n        currentProjects: Object.values(state.projects).filter(el => {\n          return el.iso3166CountryCode === action.country.alpha2\n        }),\n        currentProject: undefined,\n        nextProjectIds: ids,\n        currentCountry: action.country,\n      }\n\n    //Set current project\n    case SET_CURRENT_PROJECT:\n\n      return {\n        ...state,\n        currentProjects: [action.project],\n        currentProject: action.project,\n        currentCountry: state.countries.find(el => {\n          return el.alpha2 === action.project.iso3166CountryCode\n        })\n      }\n\n    //Set all previously loaded projects into currentProjects to be updated in list view\n    case LOAD_ALL_PROJECTS:\n\n      return {\n        ...state,\n        currentProjects: Object.values(state.projects),\n        currentProject: undefined,\n        currentCountry: undefined\n      }\n\n    default:\n      return state\n  }\n}\n\nfunction map(state = { zoom: .7, center: [0, 20] }, action) {\n  switch (action.type) {\n    //zoom into map on set current country (this means user clicked a country)\n    case SET_CURRENT_COUNTRY:\n      console.log(action)\n      return {\n        ...state,\n        zoom: 5,\n        center: [action.country.latlng[0], action.country.latlng[1]]\n      }\n    case CENTER:\n      return {\n        ...state,\n        center: action.center\n      }\n    case ZOOM_SCALE:\n      return {\n        ...state,\n        zoom: action.scale * state.zoom\n      }\n    case ZOOM:\n      return {\n        ...state,\n        zoom: action.zoom\n      }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  data, map\n})\n\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}