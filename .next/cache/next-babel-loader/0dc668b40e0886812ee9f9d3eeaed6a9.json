{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport API from '../utils/API';\nimport { API_KEY } from '../utils/API';\nimport request from 'axios';\nexport const INITIALIZE_COUNTRIES = 'INITIALIZE_COUNTRIES';\nexport const ADD_PROJECTS = 'ADD_PROJECTS';\nexport const LOAD_ALL_PROJECTS = 'LOAD_ALL_PROJECTS';\nexport const SET_CURRENT_PROJECT = 'SET_CURRENT_PROJECT';\nexport const SET_CURRENT_PROJECTS = 'SET_CURRENT_PROJECTS';\nexport const SET_CURRENT_COUNTRY = 'SET_CURRENT_COUNTRY';\nexport const ZOOM = 'ZOOM';\nexport const ZOOM_SCALE = 'ZOOM_SCALE';\nexport const CENTER = 'CENTER';\nexport const initializeCountries = () => {\n  let countries = [];\n  return dispatch => {\n    return request.get(\"/static/countries.json\").then(res => {\n      countries = res.data.ref_country_codes.map(country => {\n        let countryTemp = country;\n        countryTemp['latlng'] = [country.longitude, country.latitude];\n        return countryTemp;\n      });\n      console.log(countries);\n      dispatch(countriesInitialized(countries));\n    });\n  };\n};\n\nfunction transformResponse(data) {\n  let d = data.projects;\n  d[\"project\"] = d.project.filter(el => {\n    return el.latitude !== undefined && el.longitude !== undefined;\n  });\n  return d;\n}\n\nexport let fetchProjects = () => {\n  console.log('fetching projects');\n  return (dispatch, getState) => {\n    const state = getState();\n    let params = {\n      api_key: API_KEY\n    };\n\n    if (state.data.nextProjectIds['default'] > 0) {\n      params = {\n        api_key: API_KEY,\n        nextProjectId: state.data.nextProjectIds['default']\n      };\n    }\n\n    return API.get(\"/public/projectservice/all/projects/active\", {\n      params: params,\n      transformResponse: [transformResponse]\n    }).then(response => {\n      dispatch(projectsFetched(response.data));\n    }, err => {\n      console.log(err);\n    }).then(() => {\n      const state = getState();\n\n      if (_Object$keys(state.data.projects).length <= 50 && state.data.nextProjectIds['default'] > 0) {\n        dispatch(fetchProjects());\n      }\n    });\n  };\n};\nexport const fetchProjectsByCountry = threeLetterCountryCode => {\n  console.log('fetching projects by country');\n  return (dispatch, getState) => {\n    const state = getState();\n    console.log(threeLetterCountryCode);\n    let countryObj = state.data.countries.find(el => {\n      return el.alpha3 === threeLetterCountryCode;\n    });\n    console.log(countryObj);\n    dispatch(setCountry(countryObj));\n    const countryCode = countryObj.alpha2;\n    let params = {\n      api_key: API_KEY //query state map storing next project id by country name\n      //and add next project id to request if it exists\n\n    };\n\n    if (state.data.nextProjectIds[countryObj.country] > 0) {\n      params = {\n        api_key: API_KEY,\n        nextProjectId: state.data.nextProjectIds[countryObj.country]\n      };\n    }\n\n    return API.get('/public/projectservice/countries/' + countryCode + '/projects/active', {\n      params: params,\n      transformResponse: [transformResponse]\n    }).then(response => {\n      dispatch(projectsFetched(response.data));\n    }, err => {\n      console.log(err);\n    });\n  };\n};\nexport const projectsFetched = projects => {\n  return {\n    type: ADD_PROJECTS,\n    projects: projects.project,\n    nextProjectId: projects.nextProjectId\n  };\n};\nexport const setCountry = country => {\n  return {\n    type: SET_CURRENT_COUNTRY,\n    country: country\n  };\n};\nexport const setCurrentProject = project => {\n  return {\n    type: SET_CURRENT_PROJECT,\n    project: project\n  };\n};\nexport let loadAllProjects = () => {\n  return {\n    type: LOAD_ALL_PROJECTS\n  };\n};\nexport const zoom = zoom => {\n  return {\n    type: ZOOM,\n    zoom: zoom\n  };\n};\nexport const zoomScale = scale => {\n  return {\n    type: ZOOM_SCALE,\n    scale: scale\n  };\n};\nexport const center = center => {\n  return {\n    type: CENTER,\n    center\n  };\n};\nexport const countriesInitialized = countries => {\n  return {\n    type: INITIALIZE_COUNTRIES,\n    countries\n  };\n};","map":{"version":3,"sources":["/app/redux/actions.js"],"names":["API","API_KEY","request","INITIALIZE_COUNTRIES","ADD_PROJECTS","LOAD_ALL_PROJECTS","SET_CURRENT_PROJECT","SET_CURRENT_PROJECTS","SET_CURRENT_COUNTRY","ZOOM","ZOOM_SCALE","CENTER","initializeCountries","countries","dispatch","get","then","res","data","ref_country_codes","map","country","countryTemp","longitude","latitude","console","log","countriesInitialized","transformResponse","d","projects","project","filter","el","undefined","fetchProjects","getState","state","params","api_key","nextProjectIds","nextProjectId","response","projectsFetched","err","length","fetchProjectsByCountry","threeLetterCountryCode","countryObj","find","alpha3","setCountry","countryCode","alpha2","type","setCurrentProject","loadAllProjects","zoom","zoomScale","scale","center"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,IAAI,GAAG,MAAb;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf;AAEP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACrC,MAAIC,SAAS,GAAG,EAAhB;AACA,SAAQC,QAAD,IAAc;AACjB,WAAOZ,OAAO,CACTa,GADE,CACE,wBADF,EAEFC,IAFE,CAEGC,GAAG,IAAI;AACTJ,MAAAA,SAAS,GAAGI,GAAG,CAACC,IAAJ,CAASC,iBAAT,CAA2BC,GAA3B,CAA+BC,OAAO,IAAI;AAClD,YAAIC,WAAW,GAAGD,OAAlB;AACAC,QAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB,CAACD,OAAO,CAACE,SAAT,EAAoBF,OAAO,CAACG,QAA5B,CAAxB;AACA,eAAOF,WAAP;AACH,OAJW,CAAZ;AAKAG,MAAAA,OAAO,CAACC,GAAR,CAAYb,SAAZ;AACAC,MAAAA,QAAQ,CAACa,oBAAoB,CAACd,SAAD,CAArB,CAAR;AACH,KAVE,CAAP;AAWH,GAZD;AAaH,CAfM;;AAiBP,SAASe,iBAAT,CAA2BV,IAA3B,EAAiC;AAC7B,MAAIW,CAAC,GAAGX,IAAI,CAACY,QAAb;AACAD,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeA,CAAC,CAACE,OAAF,CAAUC,MAAV,CAAiBC,EAAE,IAAI;AAClC,WAAOA,EAAE,CAACT,QAAH,KAAgBU,SAAhB,IAA6BD,EAAE,CAACV,SAAH,KAAiBW,SAArD;AACH,GAFc,CAAf;AAGA,SAAOL,CAAP;AACH;;AAED,OAAO,IAAIM,aAAa,GAAG,MAAM;AAC7BV,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEA,SAAO,CAACZ,QAAD,EAAWsB,QAAX,KAAwB;AAC3B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,QAAIE,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAEtC;AADA,KAAb;;AAIA,QAAIoC,KAAK,CAACnB,IAAN,CAAWsB,cAAX,CAA0B,SAA1B,IAAuC,CAA3C,EAA8C;AAC1CF,MAAAA,MAAM,GAAG;AACLC,QAAAA,OAAO,EAAEtC,OADJ;AAELwC,QAAAA,aAAa,EAAEJ,KAAK,CAACnB,IAAN,CAAWsB,cAAX,CAA0B,SAA1B;AAFV,OAAT;AAIH;;AAED,WAAOxC,GAAG,CAACe,GAAJ,CAAQ,4CAAR,EAAsD;AACzDuB,MAAAA,MAAM,EAAEA,MADiD;AAEzDV,MAAAA,iBAAiB,EAAE,CAACA,iBAAD;AAFsC,KAAtD,EAIFZ,IAJE,CAIG0B,QAAQ,IAAI;AACd5B,MAAAA,QAAQ,CAAC6B,eAAe,CAACD,QAAQ,CAACxB,IAAV,CAAhB,CAAR;AACH,KANE,EAOH0B,GAAG,IAAI;AACHnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACH,KATE,EAUF5B,IAVE,CAUG,MAAM;AACR,YAAMqB,KAAK,GAAGD,QAAQ,EAAtB;;AACA,UAAI,aAAYC,KAAK,CAACnB,IAAN,CAAWY,QAAvB,EAAiCe,MAAjC,IAA2C,EAA3C,IACAR,KAAK,CAACnB,IAAN,CAAWsB,cAAX,CAA0B,SAA1B,IAAuC,CAD3C,EAC8C;AAC1C1B,QAAAA,QAAQ,CAACqB,aAAa,EAAd,CAAR;AACH;AACJ,KAhBE,CAAP;AAiBH,GA9BD;AA+BH,CAlCM;AAoCP,OAAO,MAAMW,sBAAsB,GAAIC,sBAAD,IAA4B;AAC9DtB,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEA,SAAO,CAACZ,QAAD,EAAWsB,QAAX,KAAwB;AAC3B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYqB,sBAAZ;AACA,QAAIC,UAAU,GAAGX,KAAK,CAACnB,IAAN,CAAWL,SAAX,CAAqBoC,IAArB,CAA0BhB,EAAE,IAAI;AAC7C,aAAOA,EAAE,CAACiB,MAAH,KAAcH,sBAArB;AACH,KAFgB,CAAjB;AAIAtB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,UAAZ;AACAlC,IAAAA,QAAQ,CAACqC,UAAU,CAACH,UAAD,CAAX,CAAR;AAEA,UAAMI,WAAW,GAAGJ,UAAU,CAACK,MAA/B;AACA,QAAIf,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAEtC,OADA,CAIb;AACA;;AALa,KAAb;;AAMA,QAAIoC,KAAK,CAACnB,IAAN,CAAWsB,cAAX,CAA0BQ,UAAU,CAAC3B,OAArC,IAAgD,CAApD,EAAuD;AACnDiB,MAAAA,MAAM,GAAG;AACLC,QAAAA,OAAO,EAAEtC,OADJ;AAELwC,QAAAA,aAAa,EAAEJ,KAAK,CAACnB,IAAN,CAAWsB,cAAX,CAA0BQ,UAAU,CAAC3B,OAArC;AAFV,OAAT;AAIH;;AACD,WAAOrB,GAAG,CAACe,GAAJ,CAAQ,sCAAsCqC,WAAtC,GAAoD,kBAA5D,EAAgF;AACnFd,MAAAA,MAAM,EAAEA,MAD2E;AAEnFV,MAAAA,iBAAiB,EAAE,CAACA,iBAAD;AAFgE,KAAhF,EAIFZ,IAJE,CAIG0B,QAAQ,IAAI;AACd5B,MAAAA,QAAQ,CAAC6B,eAAe,CAACD,QAAQ,CAACxB,IAAV,CAAhB,CAAR;AACH,KANE,EAOH0B,GAAG,IAAI;AACHnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACH,KATE,CAAP;AAUH,GAjCD;AAkCH,CArCM;AAuCP,OAAO,MAAMD,eAAe,GAAGb,QAAQ,IAAI;AACvC,SAAO;AACHwB,IAAAA,IAAI,EAAElD,YADH;AAEH0B,IAAAA,QAAQ,EAAEA,QAAQ,CAACC,OAFhB;AAGHU,IAAAA,aAAa,EAAEX,QAAQ,CAACW;AAHrB,GAAP;AAKH,CANM;AAQP,OAAO,MAAMU,UAAU,GAAG9B,OAAO,IAAI;AACjC,SAAO;AACHiC,IAAAA,IAAI,EAAE9C,mBADH;AAEHa,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMkC,iBAAiB,GAAGxB,OAAO,IAAI;AACxC,SAAO;AACHuB,IAAAA,IAAI,EAAEhD,mBADH;AAEHyB,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,IAAIyB,eAAe,GAAG,MAAM;AAC/B,SAAO;AACHF,IAAAA,IAAI,EAAEjD;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMoD,IAAI,GAAIA,IAAD,IAAU;AAC1B,SAAO;AACHH,IAAAA,IAAI,EAAE7C,IADH;AAEHgD,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAChC,SAAO;AACHL,IAAAA,IAAI,EAAE5C,UADH;AAEHiD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,MAAM,GAAIA,MAAD,IAAY;AAC9B,SAAO;AACHN,IAAAA,IAAI,EAAE3C,MADH;AAEHiD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAMjC,oBAAoB,GAAId,SAAD,IAAe;AAC/C,SAAO;AACHyC,IAAAA,IAAI,EAAEnD,oBADH;AAEHU,IAAAA;AAFG,GAAP;AAIH,CALM","sourcesContent":["import API from '../utils/API'\nimport { API_KEY } from '../utils/API'\nimport request from 'axios'\nexport const INITIALIZE_COUNTRIES = 'INITIALIZE_COUNTRIES'\nexport const ADD_PROJECTS = 'ADD_PROJECTS'\nexport const LOAD_ALL_PROJECTS = 'LOAD_ALL_PROJECTS'\nexport const SET_CURRENT_PROJECT = 'SET_CURRENT_PROJECT'\nexport const SET_CURRENT_PROJECTS = 'SET_CURRENT_PROJECTS'\nexport const SET_CURRENT_COUNTRY = 'SET_CURRENT_COUNTRY'\nexport const ZOOM = 'ZOOM'\nexport const ZOOM_SCALE = 'ZOOM_SCALE'\nexport const CENTER = 'CENTER'\n\nexport const initializeCountries = () => {\n    let countries = []\n    return (dispatch) => {\n        return request\n            .get(\"/static/countries.json\")\n            .then(res => {\n                countries = res.data.ref_country_codes.map(country => {\n                    let countryTemp = country;\n                    countryTemp['latlng'] = [country.longitude, country.latitude]\n                    return countryTemp\n                })\n                console.log(countries)\n                dispatch(countriesInitialized(countries))\n            })\n    }\n};\n\nfunction transformResponse(data) {\n    let d = data.projects;\n    d[\"project\"] = d.project.filter(el => {\n        return el.latitude !== undefined && el.longitude !== undefined;\n    });\n    return d;\n}\n\nexport let fetchProjects = () => {\n    console.log('fetching projects')\n\n    return (dispatch, getState) => {\n        const state = getState();\n        let params = {\n            api_key: API_KEY\n        }\n\n        if (state.data.nextProjectIds['default'] > 0) {\n            params = {\n                api_key: API_KEY,\n                nextProjectId: state.data.nextProjectIds['default']\n            }\n        }\n\n        return API.get(\"/public/projectservice/all/projects/active\", {\n            params: params,\n            transformResponse: [transformResponse]\n        })\n            .then(response => {\n                dispatch(projectsFetched(response.data));\n            },\n            err => {\n                console.log(err);\n            })\n            .then(() => {\n                const state = getState();\n                if (Object.keys(state.data.projects).length <= 50 &&\n                    state.data.nextProjectIds['default'] > 0) {\n                    dispatch(fetchProjects())\n                }\n            });\n    };\n};\n\nexport const fetchProjectsByCountry = (threeLetterCountryCode) => {\n    console.log('fetching projects by country')\n    \n    return (dispatch, getState) => {\n        const state = getState();\n        console.log(threeLetterCountryCode)\n        let countryObj = state.data.countries.find(el => {\n            return el.alpha3 === threeLetterCountryCode\n        })\n\n        console.log(countryObj)\n        dispatch(setCountry(countryObj))\n\n        const countryCode = countryObj.alpha2;\n        let params = {\n            api_key: API_KEY\n        }\n\n        //query state map storing next project id by country name\n        //and add next project id to request if it exists\n        if (state.data.nextProjectIds[countryObj.country] > 0) {\n            params = {\n                api_key: API_KEY,\n                nextProjectId: state.data.nextProjectIds[countryObj.country]\n            }\n        }\n        return API.get('/public/projectservice/countries/' + countryCode + '/projects/active', {\n            params: params,\n            transformResponse: [transformResponse]\n        })\n            .then(response => {\n                dispatch(projectsFetched(response.data));\n            },\n            err => {\n                console.log(err);\n            })\n    };\n};\n\nexport const projectsFetched = projects => {\n    return {\n        type: ADD_PROJECTS,\n        projects: projects.project,\n        nextProjectId: projects.nextProjectId\n    };\n};\n\nexport const setCountry = country => {\n    return {\n        type: SET_CURRENT_COUNTRY,\n        country: country\n    };\n};\n\nexport const setCurrentProject = project => {\n    return {\n        type: SET_CURRENT_PROJECT,\n        project: project\n    };\n};\n\nexport let loadAllProjects = () => {\n    return {\n        type: LOAD_ALL_PROJECTS\n    }\n}\n\nexport const zoom = (zoom) => {\n    return {\n        type: ZOOM,\n        zoom: zoom\n    }\n}\n\nexport const zoomScale = (scale) => {\n    return {\n        type: ZOOM_SCALE,\n        scale: scale\n    }\n}\n\nexport const center = (center) => {\n    return {\n        type: CENTER,\n        center\n    }\n}\n\nexport const countriesInitialized = (countries) => {\n    return {\n        type: INITIALIZE_COUNTRIES,\n        countries\n    };\n}"]},"metadata":{},"sourceType":"module"}