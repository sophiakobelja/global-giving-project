{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/app/pages/MapView.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Markers, Marker } from \"react-simple-maps\";\nimport { Motion, spring } from \"react-motion\"; //This utilizes the svg map view built into react-simple-maps library \n\nclass MapView extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let data = this.props.data;\n    let map = this.props.map;\n    return React.createElement(\"div\", {\n      style: {\n        width: this.props.width\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(Motion, {\n      defaultStyle: {\n        zoom: 5,\n        x: 0,\n        y: 20\n      },\n      style: {\n        zoom: spring(map.zoom, {\n          stiffness: 210,\n          damping: 20\n        }),\n        x: spring(map.center[0], {\n          stiffness: 210,\n          damping: 20\n        }),\n        y: spring(map.center[1], {\n          stiffness: 210,\n          damping: 20\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, ({\n      zoom,\n      x,\n      y\n    }) => React.createElement(ComposableMap, {\n      projectionConfig: {\n        scale: 205\n      },\n      style: {\n        width: this.props.width * .8,\n        height: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(ZoomableGroup, {\n      center: [x, y],\n      zoom: zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Geographies, {\n      geography: \"/static/world-50m.json\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, (geographies, projection) => geographies.map((geography, i) => geography.id !== \"ATA\" && React.createElement(Geography, {\n      key: i,\n      geography: geography,\n      projection: projection,\n      onClick: this.props.handleCountryClick,\n      style: {\n        default: {\n          fill: \"#ECEFF1\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\"\n        },\n        hover: {\n          fill: \"#607D8B\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\"\n        },\n        pressed: {\n          fill: \"#ECEFF1\",\n          stroke: \"#607D8B\",\n          strokeWidth: 0.75,\n          outline: \"none\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }))), React.createElement(Markers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, //now simply map all the projects to an svg marker on the map, passing the project's coordinates\n    data && _Object$values(data.projects).map((project, i) => {\n      let p = {\n        'key': project.id,\n        'name': project.title,\n        'coordinates': [project.longitude, project.latitude]\n      };\n      let style = {\n        default: {\n          stroke: \"#455A64\"\n        },\n        hover: {\n          stroke: \"#FF5722\"\n        },\n        pressed: {\n          stroke: \"#FF5722\"\n        }\n      };\n\n      if (data.currentProject !== undefined && data.currentProject.id == project.id) {\n        style = {\n          default: {\n            stroke: \"#FF5722\"\n          },\n          hover: {\n            stroke: \"#FF5722\"\n          },\n          pressed: {\n            stroke: \"#FF5722\"\n          }\n        };\n      }\n\n      return React.createElement(Marker, {\n        key: i,\n        marker: p,\n        style: style,\n        onClick: () => {\n          this.props.handleClickProject(project);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"g\", {\n        transform: \"translate(-12, -24)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        fill: \"none\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"square\",\n        strokeMiterlimit: \"10\",\n        strokeLinejoin: \"miter\",\n        d: \"M20,9c0,4.9-8,13-8,13S4,13.9,4,9c0-5.1,4.1-8,8-8S20,3.9,20,9z\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"circle\", {\n        fill: \"none\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"square\",\n        strokeMiterlimit: \"10\",\n        strokeLinejoin: \"miter\",\n        cx: \"12\",\n        cy: \"9\",\n        r: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })));\n    }))))));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/app/pages/MapView.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","Markers","Marker","Motion","spring","MapView","constructor","props","render","data","map","width","zoom","x","y","stiffness","damping","center","scale","height","geographies","projection","geography","i","id","handleCountryClick","default","fill","stroke","strokeWidth","outline","hover","pressed","projects","project","p","title","longitude","latitude","style","currentProject","undefined","handleClickProject"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\"\nimport {\n    ComposableMap,\n    ZoomableGroup,\n    Geographies,\n    Geography,\n    Markers,\n    Marker,\n} from \"react-simple-maps\"\nimport { Motion, spring } from \"react-motion\"\n\n//This utilizes the svg map view built into react-simple-maps library \nclass MapView extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        let data = this.props.data\n        let map = this.props.map\n        return (\n            <div style={{width: this.props.width}}>\n            {/*This is a built-in library that gives the \"bouncing\" effect when a user clicks \n            on a country and the map zooms in */}\n            <Motion\n                defaultStyle={{\n                    zoom: 5,\n                    x: 0,\n                    y: 20,\n                }}\n                style={{\n                    zoom: spring(map.zoom, { stiffness: 210, damping: 20 }),\n                    x: spring(map.center[0], { stiffness: 210, damping: 20 }),\n                    y: spring(map.center[1], { stiffness: 210, damping: 20 }),\n                }}\n            >\n                {({ zoom, x, y }) => (\n                    <ComposableMap\n                        projectionConfig={{ scale: 205 }}\n                        style={{\n                            width: (this.props.width * .8),\n                            height: \"auto\",\n                        }}\n                    >\n                        <ZoomableGroup center={[x, y]} zoom={zoom}>\n                            <Geographies geography=\"/static/world-50m.json\">\n                                {(geographies, projection) =>\n                                    geographies.map((geography, i) =>\n                                        geography.id !== \"ATA\" && (\n                                            <Geography\n                                                key={i}\n                                                geography={geography}\n                                                projection={projection}\n                                                onClick={this.props.handleCountryClick}\n                                                style={{\n                                                    default: {\n                                                        fill: \"#ECEFF1\",\n                                                        stroke: \"#607D8B\",\n                                                        strokeWidth: 0.75,\n                                                        outline: \"none\",\n                                                    },\n                                                    hover: {\n                                                        fill: \"#607D8B\",\n                                                        stroke: \"#607D8B\",\n                                                        strokeWidth: 0.75,\n                                                        outline: \"none\",\n                                                    },\n                                                    pressed: {\n                                                        fill: \"#ECEFF1\",\n                                                        stroke: \"#607D8B\",\n                                                        strokeWidth: 0.75,\n                                                        outline: \"none\",\n                                                    },\n                                                }}\n                                            />\n                                        ))}\n                            </Geographies>\n                            \n                            <Markers>\n                                {\n                                    //now simply map all the projects to an svg marker on the map, passing the project's coordinates\n                                    data &&\n                                    Object.values(data.projects).map((project, i) => {\n                                        let p = { 'key': project.id, 'name': project.title, 'coordinates': [project.longitude, project.latitude] }\n                                        let style = {\n                                            default: { stroke: \"#455A64\" },\n                                            hover: { stroke: \"#FF5722\" },\n                                            pressed: { stroke: \"#FF5722\" },\n                                        }\n                                        if (data.currentProject !== undefined && data.currentProject.id == project.id) {\n                                            style = {\n                                                default: { stroke: \"#FF5722\" },\n                                                hover: { stroke: \"#FF5722\" },\n                                                pressed: { stroke: \"#FF5722\" },\n                                            }\n                                        }\n                                        return (\n                                            <Marker key={i} marker={p}\n                                                style={style}\n                                                onClick={() => {\n                                                    this.props.handleClickProject(project)\n                                                }}>\n\n                                                <g transform=\"translate(-12, -24)\">\n                                                    <path\n                                                        fill=\"none\"\n                                                        strokeWidth=\"2\"\n                                                        strokeLinecap=\"square\"\n                                                        strokeMiterlimit=\"10\"\n                                                        strokeLinejoin=\"miter\"\n                                                        d=\"M20,9c0,4.9-8,13-8,13S4,13.9,4,9c0-5.1,4.1-8,8-8S20,3.9,20,9z\"\n                                                    />\n                                                    <circle\n                                                        fill=\"none\"\n                                                        strokeWidth=\"2\"\n                                                        strokeLinecap=\"square\"\n                                                        strokeMiterlimit=\"10\"\n                                                        strokeLinejoin=\"miter\"\n                                                        cx=\"12\"\n                                                        cy=\"9\"\n                                                        r=\"3\"\n                                                    />\n                                                </g>\n                                            </Marker>)\n                                    })\n                                }\n                            </Markers>\n                        </ZoomableGroup>\n                    </ComposableMap>\n                )}\n            </Motion>\n            </div>\n        )\n    }\n}\nexport default MapView\n"]},"metadata":{},"sourceType":"module"}