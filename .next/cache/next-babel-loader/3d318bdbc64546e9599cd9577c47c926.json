{"ast":null,"code":"var _jsxFileName = \"/app/pages/GlobalGivingMap.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Markers, Marker } from \"react-simple-maps\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ListView from './ListView';\nimport MapView from './MapView';\nimport { initializeCountries, fetchProjects, fetchProjectsByCountry, zoom, zoomScale, center, setCurrentProject, loadAllProjects } from '../redux/actions';\n\nclass GlobalGivingMap extends Component {\n  constructor(props) {\n    super(props);\n    this.handleZoomIn = this.handleZoomIn.bind(this);\n    this.handleZoomOut = this.handleZoomOut.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleCountryClick = this.handleCountryClick.bind(this);\n    this.dispatchCountry = this.dispatchCountry.bind(this);\n    this.handleClickProject = this.handleClickProject.bind(this);\n    this.handleClickLoadMore = this.handleClickLoadMore.bind(this);\n  } //When component mounts, get initial 50 countries\n  //and initialize static list of countries from /static/countries.json\n\n\n  componentDidMount() {\n    this.props.dispatch(fetchProjects()); //dispatching initialize countries\n\n    this.props.dispatch(initializeCountries());\n  }\n\n  handleZoomIn() {\n    this.props.dispatch(zoomScale(1.5));\n  }\n\n  handleZoomOut() {\n    this.props.dispatch(zoomScale(.75));\n  }\n\n  handleClickProject(project) {\n    this.props.dispatch(setCurrentProject(project));\n    this.props.dispatch(zoom(10));\n    this.props.dispatch(center([project.longitude, project.latitude]));\n  }\n\n  handleCountryClick(country) {\n    this.dispatchCountry(country.id);\n  }\n\n  dispatchCountry(threeLetterCountryCode) {\n    this.props.dispatch(fetchProjectsByCountry(threeLetterCountryCode));\n  }\n\n  handleReset() {\n    this.props.dispatch(zoom(.7));\n    this.props.dispatch(center([0, 20]));\n    this.props.dispatch(loadAllProjects());\n  }\n\n  handleClickLoadMore() {\n    const {\n      data,\n      map\n    } = this.props;\n\n    if (data.currentCountry !== undefined) {\n      this.props.dispatch(fetchProjectsByCountry(data.currentCountry.alpha3));\n    } else {\n      this.props.dispatch(fetchProjects());\n    }\n  }\n\n  render() {\n    const {\n      data,\n      map\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleZoomIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Zoom in\"), React.createElement(\"button\", {\n      onClick: this.handleZoomOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Zoom out\"), React.createElement(\"button\", {\n      onClick: this.handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(MapView, {\n      width: this.props.width,\n      data: data,\n      map: map,\n      handleCountryClick: this.handleCountryClick,\n      handleClickProject: this.handleClickProject,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(ListView, {\n      width: this.props.width * .15,\n      data: data,\n      handleClickLoadMore: this.handleClickLoadMore,\n      handleClickProject: this.handleClickProject,\n      dispatchCountry: this.dispatchCountry,\n      viewAllProjects: this.handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n} //ensures dispatch function is initialized upon instantiation \n\n\nGlobalGivingMap.propTypes = {\n  dispatch: PropTypes.func.isRequired //Redux will dispatch current app state\n  //so this will simply map the dispatched state\n  //to the component's props \n\n};\n\nfunction mapDispatchToProps(state) {\n  const {\n    data,\n    map\n  } = state;\n  return state;\n}\n\nexport default connect(mapDispatchToProps)(GlobalGivingMap);","map":{"version":3,"sources":["/app/pages/GlobalGivingMap.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","Markers","Marker","connect","PropTypes","ListView","MapView","initializeCountries","fetchProjects","fetchProjectsByCountry","zoom","zoomScale","center","setCurrentProject","loadAllProjects","GlobalGivingMap","constructor","props","handleZoomIn","bind","handleZoomOut","handleReset","handleCountryClick","dispatchCountry","handleClickProject","handleClickLoadMore","componentDidMount","dispatch","project","longitude","latitude","country","id","threeLetterCountryCode","data","map","currentCountry","undefined","alpha3","render","width","propTypes","func","isRequired","mapDispatchToProps","state"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\"\nimport {\n    ComposableMap,\n    ZoomableGroup,\n    Geographies,\n    Geography,\n    Markers,\n    Marker,\n} from \"react-simple-maps\"\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport ListView from './ListView'\nimport MapView from './MapView'\nimport {\n    initializeCountries,\n    fetchProjects,\n    fetchProjectsByCountry,\n    zoom,\n    zoomScale,\n    center,\n    setCurrentProject,\n    loadAllProjects\n} from '../redux/actions'\n\nclass GlobalGivingMap extends Component {\n    constructor(props) {\n        super(props)\n        this.handleZoomIn = this.handleZoomIn.bind(this)\n        this.handleZoomOut = this.handleZoomOut.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleCountryClick = this.handleCountryClick.bind(this)\n        this.dispatchCountry = this.dispatchCountry.bind(this)\n        this.handleClickProject = this.handleClickProject.bind(this)\n        this.handleClickLoadMore = this.handleClickLoadMore.bind(this)\n    }\n\n    //When component mounts, get initial 50 countries\n    //and initialize static list of countries from /static/countries.json\n    componentDidMount() {\n        this.props.dispatch(fetchProjects())\n        //dispatching initialize countries\n        this.props.dispatch(initializeCountries())\n    }\n\n    handleZoomIn() {\n        this.props.dispatch(zoomScale(1.5))\n    }\n    \n    handleZoomOut() {\n        this.props.dispatch(zoomScale(.75))\n    }\n\n    handleClickProject(project) {\n        this.props.dispatch(setCurrentProject(project))\n        this.props.dispatch(zoom(10))\n        this.props.dispatch(center([project.longitude, project.latitude]))\n    }\n\n    handleCountryClick(country) {\n        this.dispatchCountry(country.id)\n    }\n\n    dispatchCountry(threeLetterCountryCode) {\n        this.props.dispatch(fetchProjectsByCountry(threeLetterCountryCode))\n    }\n\n    handleReset() {\n        this.props.dispatch(zoom(.7))\n        this.props.dispatch(center([0, 20]))\n        this.props.dispatch(loadAllProjects())\n    }\n\n    handleClickLoadMore() {\n        const { data, map } = this.props\n        if (data.currentCountry !== undefined) {\n            this.props.dispatch(fetchProjectsByCountry(data.currentCountry.alpha3))\n        } else {\n            this.props.dispatch(fetchProjects())\n        }\n    }\n\n    render() {\n        const { data, map } = this.props\n        return (\n            <div>\n                <button onClick={this.handleZoomIn}>{\"Zoom in\"}</button>\n                <button onClick={this.handleZoomOut}>{\"Zoom out\"}</button>\n                <button onClick={this.handleReset}>{\"Reset\"}</button>\n                <MapView\n                    width={this.props.width}\n                    data={data}\n                    map={map}\n                    handleCountryClick={this.handleCountryClick}\n                    handleClickProject={this.handleClickProject}\n                    />\n                <ListView \n                    width={this.props.width * .15}\n                    data={data}\n                    handleClickLoadMore={this.handleClickLoadMore}\n                    handleClickProject={this.handleClickProject}\n                    dispatchCountry={this.dispatchCountry}\n                    viewAllProjects={this.handleReset}\n                />\n            </div>\n        )\n    }\n}\n\n//ensures dispatch function is initialized upon instantiation \nGlobalGivingMap.propTypes = {\n    dispatch: PropTypes.func.isRequired\n}\n\n//Redux will dispatch current app state\n//so this will simply map the dispatched state\n//to the component's props \nfunction mapDispatchToProps(state) {\n    const { data, map } = state\n    return state\n}\n\nexport default connect(mapDispatchToProps)(GlobalGivingMap)\n"]},"metadata":{},"sourceType":"module"}